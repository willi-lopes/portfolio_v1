{"version":3,"sources":["script.js"],"names":["$","document","ready","changeFeaturedImage","$grid","index","imageSrc","title","description","$featuredImageContainer","$imageTitle","find","$imageDesc","$thumbnails","removeClass","eq","addClass","$featuredImg","newImage","Image","attr","adjustImageSize","width","height","text","setTimeout","src","newHeight","containerWidth","ratio","maxHeight","min","innerHeight","Math","window","css","hasClass","each","onload","img","currentActive","e","preventDefault","activeElement","closest","currentIndex","prevThumb","log","nextThumb","data","let","key","length","replace","initAllImageGrids","preloadImages","gridId","this","random","toString","substr","on","first","console"],"mappings":"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","file":"script.js","sourcesContent":["$(document).ready(function() {\r\n  // Inicializar todos os grids na página\r\n  function initAllImageGrids() {\r\n    $('.image-grid-component').each(function() {\r\n      initImageGrid($(this));\r\n    });\r\n  }\r\n\r\n  // Inicializar um grid específico\r\n  function initImageGrid($grid) {\r\n    const gridId = $grid.attr('data-grid-id') || 'grid-' + Math.random().toString(36).substr(2, 9);\r\n    $grid.attr('data-grid-id', gridId);\r\n    \r\n    // Elementos do grid atual\r\n    const $featuredImg = $grid.find('.featured-img');\r\n    const $featuredImageContainer = $grid.find('.featured-image');\r\n    const $imageTitle = $grid.find('.image-title');\r\n    const $imageDesc = $grid.find('.image-desc');\r\n    const $thumbnails = $grid.find('.thumbnail');\r\n\r\n    // Adicionar evento de clique às miniaturas\r\n    $thumbnails.on('click', function() {\r\n      const index = $(this).data('index');\r\n      const title = $(this).data('title');\r\n      const description = $(this).data('desc');\r\n      const imageSrc = $(this).find('img').attr('src').replace('300', '1000');\r\n      \r\n      changeFeaturedImage($grid, index, imageSrc, title, description);\r\n    });\r\n\r\n    // Ativar a primeira miniatura por padrão\r\n    $thumbnails.first().addClass('active');\r\n    \r\n    // Pré-carregar imagens para melhor performance\r\n    preloadImages($grid);\r\n  }\r\n\r\n  // Pré-carregar imagens de um grid específico\r\n  function preloadImages($grid) {\r\n    $grid.find('.thumbnail').each(function() {\r\n      const imageSrc = $(this).find('img').attr('src').replace('300', '1000');\r\n      const img = new Image();\r\n      img.src = imageSrc;\r\n    });\r\n  }\r\n\r\n  // Alterar a imagem em destaque de um grid específico\r\n  function changeFeaturedImage($grid, index, imageSrc, title, description) {\r\n    // Elementos do grid atual\r\n    const $featuredImg = $grid.find('.featured-img');\r\n    const $featuredImageContainer = $grid.find('.featured-image');\r\n    const $imageTitle = $grid.find('.image-title');\r\n    const $imageDesc = $grid.find('.image-desc');\r\n    const $thumbnails = $grid.find('.thumbnail');\r\n\r\n    // Remover classe active de todas as miniaturas deste grid\r\n    $thumbnails.removeClass('active');\r\n    \r\n    // Adicionar classe active à miniatura clicada\r\n    $thumbnails.eq(index).addClass('active');\r\n    \r\n    // Mostrar indicador de carregamento\r\n    $featuredImageContainer.addClass('loading');\r\n    $featuredImg.addClass('loading');\r\n    \r\n    // Criar uma nova imagem para pré-carregamento\r\n    const newImage = new Image();\r\n    \r\n    newImage.onload = function() {\r\n      // Quando a imagem carregar, atualizar a exibição\r\n      $featuredImg.attr('src', imageSrc);\r\n      $featuredImg.attr('alt', title);\r\n      \r\n      // Ajustar a altura com base na proporção da imagem\r\n      adjustImageSize($grid, newImage.width, newImage.height);\r\n      \r\n      // Atualizar informações\r\n      $imageTitle.text(title);\r\n      $imageDesc.text(description);\r\n      \r\n      // Remover classes de loading e adicionar loaded\r\n      setTimeout(function() {\r\n        $featuredImageContainer.removeClass('loading');\r\n        $featuredImg.removeClass('loading').addClass('loaded');\r\n      }, 300);\r\n    };\r\n    \r\n    newImage.onerror = function() {\r\n      // Em caso de erro, ainda atualizar as informações\r\n      $imageTitle.text(title);\r\n      $imageDesc.text(description);\r\n      \r\n      // Remover loading\r\n      $featuredImageContainer.removeClass('loading');\r\n      $featuredImg.removeClass('loading');\r\n      \r\n      console.error('Erro ao carregar a imagem:', imageSrc);\r\n    };\r\n    \r\n    // Iniciar o carregamento\r\n    newImage.src = imageSrc;\r\n  }\r\n\r\n  // Ajustar o tamanho do container com base na proporção da imagem\r\n  function adjustImageSize($grid, width, height) {\r\n    const $featuredImageContainer = $grid.find('.featured-image');\r\n    const ratio = height / width;\r\n    const containerWidth = $featuredImageContainer.width();\r\n    const newHeight = containerWidth * ratio;\r\n    \r\n    // Limitar a altura máxima\r\n    const maxHeight = Math.min(newHeight, window.innerHeight * 0.8);\r\n    \r\n    // Aplicar a altura\r\n    $featuredImageContainer.css('height', maxHeight + 'px');\r\n  }\r\n\r\n  // Redimensionar as imagens quando a janela for redimensionada\r\n  $(window).on('resize', function() {\r\n    $('.image-grid-component').each(function() {\r\n      const $grid = $(this);\r\n      const $featuredImg = $grid.find('.featured-img');\r\n      \r\n      if ($featuredImg.hasClass('loaded')) {\r\n        const img = new Image();\r\n        img.src = $featuredImg.attr('src');\r\n        \r\n        img.onload = function() {\r\n          adjustImageSize($grid, img.width, img.height);\r\n        };\r\n      }\r\n    });\r\n  });\r\n\r\n  // Navegação por teclado (para o grid com foco)\r\n  $(document).on('keydown', function(e) {\r\n    // Encontrar o grid que está em foco (que contém o elemento ativo)\r\n    const $activeElement = $(document.activeElement);\r\n    const $grid = $activeElement.closest('.image-grid-component');\r\n    \r\n    if ($grid.length === 0) return;\r\n    \r\n    const $thumbnails = $grid.find('.thumbnail');\r\n    const currentActive = $grid.find('.thumbnail.active');\r\n    let currentIndex = currentActive.data('index');\r\n    \r\n    if (e.key === 'ArrowRight') {\r\n      e.preventDefault();\r\n      // Próxima imagem\r\n      currentIndex = (currentIndex + 1) % $thumbnails.length;\r\n      const nextThumb = $thumbnails.eq(currentIndex);\r\n      const title = nextThumb.data('title');\r\n      const description = nextThumb.data('desc');\r\n      const imageSrc = nextThumb.find('img').attr('src').replace('300', '1000');\r\n      \r\n      changeFeaturedImage($grid, currentIndex, imageSrc, title, description);\r\n    } else if (e.key === 'ArrowLeft') {\r\n      e.preventDefault();\r\n      // Imagem anterior\r\n      currentIndex = (currentIndex - 1 + $thumbnails.length) % $thumbnails.length;\r\n      const prevThumb = $thumbnails.eq(currentIndex);\r\n      const title = prevThumb.data('title');\r\n      const description = prevThumb.data('desc');\r\n      const imageSrc = prevThumb.find('img').attr('src').replace('300', '1000');\r\n      \r\n      changeFeaturedImage($grid, currentIndex, imageSrc, title, description);\r\n    }\r\n  });\r\n\r\n  // Inicializar todos os grids\r\n  initAllImageGrids();\r\n\r\n  // Debug: Log para verificar se o script está carregando\r\n  console.log('Grid de Imagens Multi-instância carregado com sucesso!');\r\n  console.log('Grids encontrados:', $('.image-grid-component').length);\r\n});"]}